import math
import time

def factorize(n):
    # Factorize number 'n' into two factors
    i = 2
    while n % i != 0:
        i += 1
    return i, n // i

def is_co_prime(e, phi):
    # Check if e and phi are co-prime
    return math.gcd(e, phi) == 1

def find_e(p, q):
    # Find a suitable public exponent e
    phi = (p - 1) * (q - 1)
    e = 3  # Start with the smallest prime number
    while not is_co_prime(e, phi):
        e += 2
    return e

def extended_gcd(a, b):
    # Extended Euclidean Algorithm to find gcd and coefficients
    if a == 0:
        return b, 0, 1
    else:
        gcd, x, y = extended_gcd(b % a, a)
        return gcd, y - (b // a) * x, x

def modular_inverse(e, phi):
    # Find the modular inverse of e modulo phi
    gcd, x, y = extended_gcd(e, phi)
    if gcd != 1:
        print("e and phi are not co-prime, so the modular inverse does not exist.")
        return None
    else:
        return x % phi

def brute_force_private_exponent(public_key):
    # Find d using brute force
    n, e = public_key
    p, q = factorize(n)
    phi = (p - 1) * (q - 1)
    d = 1
    while True:
        if (e * d) % phi == 1:
            return d
        d += 1
'''
def brute_force_private_exponent(phi, e):
    # Find d using brute force
    d = 1
    while True:
        if (e * d) % phi == 1:
            return d
        d += 1
'''

def generate_8bit_keys():
    start_time = time.perf_counter()

    n = 2491  # Any 8-bit number
    p, q = factorize(n)
    phi = (p - 1) * (q - 1)
    e = find_e(p, q)  # Find a suitable value for e
    d = modular_inverse(e, phi)  # Find d using Euclidean Algorithm

    end_time = time.perf_counter()
    return (n, e), (n, d), end_time - start_time

def generate_16bit_keys():
    start_time = time.perf_counter()
    
    n = 295927  # Any 16-bit number
    p, q = factorize(n)
    phi = (p - 1) * (q - 1)
    e = find_e(p, q)  # Find a suitable value for e
    d = modular_inverse(e, phi)  # Find d using Euclidean Algorithm
    
    end_time = time.perf_counter()
    return (n, e), (n, d), end_time - start_time

def encrypt(message, public_key):
    # Encrypt the message using the public key
    n, e = public_key
    encrypted_message = pow(message, e, n)
    return encrypted_message

def decrypt(encrypted_message, private_key):
    # Decrypt the message using the private key
    n, d = private_key
    decrypted_message = pow(encrypted_message, d, n)
    return decrypted_message

def rsa_test():
    while True:
        check = input("Please enter 8 to test for 8 bits or 16 to test for 16 bits or type 'end' to end testing: ")
        if check == "end":
            break
        if check not in ["8", "16"]:
            print("Invalid input. Please enter 8 or 16 or 'end'.")
            continue

        message = int(input("Please enter the message to test with: "))
        if check == "8":
            public_key, private_key, key_gen_time = generate_8bit_keys()
        elif check == "16":
            public_key, private_key, key_gen_time = generate_16bit_keys()
        
        print("RSA-TEST")
        print("Public key (N, E):", public_key)
        print("Private key (N, D):", private_key)
        print("Private exponent (d):", brute_force_private_exponent(public_key))
        print("Generation time:", key_gen_time, "seconds")
        print("Original message:", message)
        encrypted_message = encrypt(message, public_key)
        print("Encrypted message:", encrypted_message)
        decrypted_message = decrypt(encrypted_message, private_key)
        print("Decrypted message:", decrypted_message)
        print()

def main():
    rsa_test()

if __name__ == "__main__":
    main()
